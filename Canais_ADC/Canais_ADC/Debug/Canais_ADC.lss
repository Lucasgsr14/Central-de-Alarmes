
Canais_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000735  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000686  00000000  00000000  000009c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00001047  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005d  00000000  00000000  00001675  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
static inline void teste(uint8_t sample);

int main(void)
{
    uint16_t sample;
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	ADMUX |= ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR));
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 66       	ori	r24, 0x60	; 96
  8c:	80 83       	st	Z, r24
	ADCSRA |= ((1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0));
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	87 60       	ori	r24, 0x07	; 7
  96:	80 83       	st	Z, r24
    while(1){
		ADCSRA |= ((1<<ADEN) | (1<<ADSC));
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 6c       	ori	r24, 0xC0	; 192
  a0:	80 83       	st	Z, r24
		while(ADIF==0);
		ADCSRA |= ((0<<ADIF) | (0<<ADEN));
  a2:	80 81       	ld	r24, Z
  a4:	80 83       	st	Z, r24
		sample = ADCH;
  a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		delay(100);
		PORTD = 0x00;
    }
}
static inline void teste(uint8_t sample){
	PORTD |= ((int)(sample/128)<<PORTD7);
  aa:	4b b1       	in	r20, 0x0b	; 11
  ac:	98 2f       	mov	r25, r24
  ae:	99 1f       	adc	r25, r25
  b0:	99 27       	eor	r25, r25
  b2:	99 1f       	adc	r25, r25
  b4:	29 2f       	mov	r18, r25
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	36 95       	lsr	r19
  ba:	32 2f       	mov	r19, r18
  bc:	22 27       	eor	r18, r18
  be:	37 95       	ror	r19
  c0:	27 95       	ror	r18
  c2:	24 2b       	or	r18, r20
  c4:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 128){
  c6:	88 23       	and	r24, r24
  c8:	0c f4       	brge	.+2      	; 0xcc <main+0x4c>
		sample %= 128;
  ca:	8f 77       	andi	r24, 0x7F	; 127
	}
	PORTD |= ((int)(sample/64)<<PORTD6);
  cc:	4b b1       	in	r20, 0x0b	; 11
  ce:	98 2f       	mov	r25, r24
  d0:	92 95       	swap	r25
  d2:	96 95       	lsr	r25
  d4:	96 95       	lsr	r25
  d6:	93 70       	andi	r25, 0x03	; 3
  d8:	50 e4       	ldi	r21, 0x40	; 64
  da:	95 9f       	mul	r25, r21
  dc:	90 01       	movw	r18, r0
  de:	11 24       	eor	r1, r1
  e0:	24 2b       	or	r18, r20
  e2:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 64){
  e4:	80 34       	cpi	r24, 0x40	; 64
  e6:	08 f0       	brcs	.+2      	; 0xea <main+0x6a>
		sample %= 64;
  e8:	8f 73       	andi	r24, 0x3F	; 63
	}
	PORTD |= ((int)(sample/32)<<PORTD5);
  ea:	4b b1       	in	r20, 0x0b	; 11
  ec:	98 2f       	mov	r25, r24
  ee:	92 95       	swap	r25
  f0:	96 95       	lsr	r25
  f2:	97 70       	andi	r25, 0x07	; 7
  f4:	50 e2       	ldi	r21, 0x20	; 32
  f6:	95 9f       	mul	r25, r21
  f8:	90 01       	movw	r18, r0
  fa:	11 24       	eor	r1, r1
  fc:	24 2b       	or	r18, r20
  fe:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 32){
 100:	80 32       	cpi	r24, 0x20	; 32
 102:	08 f0       	brcs	.+2      	; 0x106 <main+0x86>
		sample %= 32;
 104:	8f 71       	andi	r24, 0x1F	; 31
	}
	PORTD |= ((int)(sample/16)<<PORTD4);
 106:	4b b1       	in	r20, 0x0b	; 11
 108:	98 2f       	mov	r25, r24
 10a:	92 95       	swap	r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	50 e1       	ldi	r21, 0x10	; 16
 110:	95 9f       	mul	r25, r21
 112:	90 01       	movw	r18, r0
 114:	11 24       	eor	r1, r1
 116:	24 2b       	or	r18, r20
 118:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 16){
 11a:	80 31       	cpi	r24, 0x10	; 16
 11c:	08 f0       	brcs	.+2      	; 0x120 <main+0xa0>
		sample %= 16;
 11e:	8f 70       	andi	r24, 0x0F	; 15
	}
	PORTD |= ((int)(sample/8)<<PORTD3);
 120:	4b b1       	in	r20, 0x0b	; 11
 122:	98 2f       	mov	r25, r24
 124:	96 95       	lsr	r25
 126:	96 95       	lsr	r25
 128:	96 95       	lsr	r25
 12a:	29 2f       	mov	r18, r25
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	24 2b       	or	r18, r20
 13c:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 8){
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	08 f0       	brcs	.+2      	; 0x144 <main+0xc4>
		sample %= 8;
 142:	87 70       	andi	r24, 0x07	; 7
	}
	PORTD |= ((int)(sample/4)<<PORTD2);
 144:	4b b1       	in	r20, 0x0b	; 11
 146:	98 2f       	mov	r25, r24
 148:	96 95       	lsr	r25
 14a:	96 95       	lsr	r25
 14c:	29 2f       	mov	r18, r25
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	24 2b       	or	r18, r20
 15a:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 4){
 15c:	84 30       	cpi	r24, 0x04	; 4
 15e:	08 f0       	brcs	.+2      	; 0x162 <main+0xe2>
		sample %= 4;
 160:	83 70       	andi	r24, 0x03	; 3
	}
	PORTD |= ((int)(sample/2)<<PORTD1);
 162:	4b b1       	in	r20, 0x0b	; 11
 164:	98 2f       	mov	r25, r24
 166:	96 95       	lsr	r25
 168:	29 2f       	mov	r18, r25
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	24 2b       	or	r18, r20
 172:	2b b9       	out	0x0b, r18	; 11
	if(sample >= 2){
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	08 f0       	brcs	.+2      	; 0x17a <main+0xfa>
		sample %= 2;
 178:	81 70       	andi	r24, 0x01	; 1
	}
	PORTD |= ((int)(sample)<<PORTD0);
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	89 2b       	or	r24, r25
 17e:	8b b9       	out	0x0b, r24	; 11
}
static inline void delay(uint8_t t){
	for (uint8_t i = 0; i < t; i++){
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	0b c0       	rjmp	.+22     	; 0x19a <main+0x11a>
		GPIOR0 = t;
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	8e bb       	out	0x1e, r24	; 30
		for(uint8_t j = 0; j < 204; j++){
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	04 c0       	rjmp	.+8      	; 0x194 <main+0x114>
			GPIOR0--;
 18c:	8e b3       	in	r24, 0x1e	; 30
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	8e bb       	out	0x1e, r24	; 30
	PORTD |= ((int)(sample)<<PORTD0);
}
static inline void delay(uint8_t t){
	for (uint8_t i = 0; i < t; i++){
		GPIOR0 = t;
		for(uint8_t j = 0; j < 204; j++){
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	9c 3c       	cpi	r25, 0xCC	; 204
 196:	d0 f3       	brcs	.-12     	; 0x18c <main+0x10c>
		sample %= 2;
	}
	PORTD |= ((int)(sample)<<PORTD0);
}
static inline void delay(uint8_t t){
	for (uint8_t i = 0; i < t; i++){
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	24 36       	cpi	r18, 0x64	; 100
 19c:	98 f3       	brcs	.-26     	; 0x184 <main+0x104>
		while(ADIF==0);
		ADCSRA |= ((0<<ADIF) | (0<<ADEN));
		sample = ADCH;
		teste(sample);
		delay(100);
		PORTD = 0x00;
 19e:	1b b8       	out	0x0b, r1	; 11
    }
 1a0:	7b cf       	rjmp	.-266    	; 0x98 <main+0x18>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
