
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000737  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023f  00000000  00000000  00000f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  00001501  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

static inline void delay(uint8_t t, uint8_t p);

int main(void)
{
	DDRD = 0x01;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  84:	1b b8       	out	0x0b, r1	; 11
    /* Replace with your application code */
    while (1) 
    {
		PORTD = 0x01;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	8b b9       	out	0x0b, r24	; 11
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <main+0x20>
		for(uint8_t j = 0; j < t; j++){
			GPIOR0--;
  8e:	8e b3       	in	r24, 0x1e	; 30
  90:	81 50       	subi	r24, 0x01	; 1
  92:	8e bb       	out	0x1e, r24	; 30
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
		for(uint8_t j = 0; j < t; j++){
  94:	9f 5f       	subi	r25, 0xFF	; 255
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x1a>
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  98:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t j = 0; j < t; j++){
  9a:	95 31       	cpi	r25, 0x15	; 21
  9c:	c0 f3       	brcs	.-16     	; 0x8e <main+0xe>
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	22 30       	cpi	r18, 0x02	; 2
  a2:	d0 f3       	brcs	.-12     	; 0x98 <main+0x18>
    /* Replace with your application code */
    while (1) 
    {
		PORTD = 0x01;
		delay(21, 2); //t = 21 = 50us
		PORTD = 0x00;
  a4:	1b b8       	out	0x0b, r1	; 11
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	09 c0       	rjmp	.+18     	; 0xbc <main+0x3c>
		for(uint8_t j = 0; j < t; j++){
			GPIOR0--;
  aa:	8e b3       	in	r24, 0x1e	; 30
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	8e bb       	out	0x1e, r24	; 30
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
		for(uint8_t j = 0; j < t; j++){
  b0:	9f 5f       	subi	r25, 0xFF	; 255
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x36>
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  b4:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t j = 0; j < t; j++){
  b6:	9a 30       	cpi	r25, 0x0A	; 10
  b8:	c0 f3       	brcs	.-16     	; 0xaa <main+0x2a>
		delay(10, 1);
    }
}

static inline void delay(uint8_t t, uint8_t p){
	for (uint8_t i = 0; i < p; i++){
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	22 23       	and	r18, r18
  be:	d1 f3       	breq	.-12     	; 0xb4 <main+0x34>
  c0:	e2 cf       	rjmp	.-60     	; 0x86 <main+0x6>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
